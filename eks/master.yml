Description: EKS Cluster master template

Parameters:

  AppName:
    Description: Application the infrastructure belongs to
    Type: String
  
  EnvName:
    Description: Environment being deployed to
    Type: String
  
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  
  # BastionSecurityGroup:
  #   Description: Bastion security group to allow SSH tunneling from
  #   Type: AWS::EC2::SecurityGroup::Id

  S3BucketName:
    Description: The name of the S3 Bucket where nested template files are stored
    Type: String

  ClusterName:
    Description: Name of the Cluster to deploy
    Type: String

  NodeImageId:
    Description: AMI id for the node instances
    Type: AWS::EC2::Image::Id
    Default: ami-0abcb9f9190e867ab # https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html

  NodeInstanceType:
    Description: EC2 instance type for the node instances
    Type: String
    Default: t3.small

  ClusterSize:
    Description: Size of each Node Group ASG.
    Type: Number
    Default: 2

  NodeVolumeSize:
    Description: Node volume size
    Type: Number
    Default: 40

  BootstrapArguments:
    Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
    Type: String
    Default: ""

Resources:

  # VPC and Subnets
  Network:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${S3BucketName}.s3.amazonaws.com/vpc.yml'
      Parameters:
        AppName: !Ref AppName
        EnvName: !Ref EnvName
        VpcCidr: '10.0.0.0/16'
        PublicSubnet1Cidr: '10.0.0.0/24'
        PublicSubnet2Cidr: '10.0.1.0/24'
        PrivateSubnet1Cidr: '10.0.2.0/24'
        PrivateSubnet2Cidr: '10.0.3.0/24'
  
  # EKS Cluster
  ClusterIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [eks.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !GetAtt Network.Outputs.VPC
      GroupDescription: Security group for the Control Plane
      # SecurityGroupIngress:
      #   # SSH Access
      #   - SourceSecurityGroupId: !Ref BastionSecurityGroup
      #     FromPort: 22
      #     ToPort: 22
      #     IpProtocol: tcp
      Tags:
        - Key: Application
          Value: !Ref AppName
        - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
          Value: 'owned'
  
  NodeSecurityGroup:
    Type: AWS::CloudFormation::Stack
    DependsOn: ControlPlaneSecurityGroup
    Properties:
      TemplateURL: !Sub 'https://${S3BucketName}.s3.amazonaws.com/node-security-group.yml'
      Parameters:
        AppName: !Ref AppName
        ClusterName: !Ref ClusterName
        # BastionSecurityGroup: !Ref BastionSecurityGroup
        ControlPlaneSecurityGroup: !GetAtt ControlPlaneSecurityGroup.GroupId
        VPC: !GetAtt Network.Outputs.VPC

  EKSCluster:
    Type: AWS::EKS::Cluster
    DependsOn: NodeSecurityGroup # purely for ordering convenience
    Properties:
      Name: !Ref ClusterName
      RoleArn: !GetAtt ClusterIamRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds: 
          - !GetAtt ControlPlaneSecurityGroup.GroupId
        SubnetIds:
          - !GetAtt Network.Outputs.PublicSubnetOne
          - !GetAtt Network.Outputs.PublicSubnetTwo

  NodeGroup1:
    Type: AWS::CloudFormation::Stack
    DependsOn: 
      - NodeSecurityGroup
      - EKSCluster
    Properties:
      TemplateURL: !Sub 'https://${S3BucketName}.s3.amazonaws.com/worker-nodes.yml'
      Parameters:
        AppName: !Ref AppName
        KeyName: !Ref KeyName
        NodeImageId: !Ref NodeImageId
        NodeInstanceType: !Ref NodeInstanceType
        MinSize: !Ref ClusterSize
        MaxSize: !Ref ClusterSize
        StorageSize: !Ref NodeVolumeSize
        BootstrapArguments: !Ref BootstrapArguments
        ClusterName: !Ref ClusterName
        NodeGroupName: !Sub "${AppName}-group-1"
        Subnets: !Join [ ",", [ !GetAtt Network.Outputs.PublicSubnetOne, !GetAtt Network.Outputs.PublicSubnetTwo ] ]
        NodeSecurityGroup: !GetAtt NodeSecurityGroup.Outputs.NodeSecurityGroup

  # NodeGroup2:
  #   Type: AWS::CloudFormation::Stack
  #   DependsOn: 
  #     - NodeSecurityGroup
  #     - EKSCluster
  #   Properties:
  #     TemplateURL: !Sub 'https://${S3BucketName}.s3.amazonaws.com/worker-nodes.yml'
  #     Parameters:
  #       AppName: !Ref AppName
  #       KeyName: !Ref KeyName
  #       NodeImageId: !Ref NodeImageId
  #       NodeInstanceType: !Ref NodeInstanceType
  #       MinSize: !Ref ClusterSize
  #       MaxSize: !Ref ClusterSize
  #       StorageSize: !Ref NodeVolumeSize
  #       BootstrapArguments: !Ref BootstrapArguments
  #       ClusterName: !Ref ClusterName
  #       NodeGroupName: !Sub "${AppName}-group-2"
  #       Subnets: !Join [ ",", [ !GetAtt Network.Outputs.PublicSubnetOne, !GetAtt Network.Outputs.PublicSubnetTwo ] ]
  #       NodeSecurityGroup: !GetAtt NodeSecurityGroup.Outputs.NodeSecurityGroup

Outputs:

  NodeInstanceRole:
    Description: Instance Profile to allow nodes to join to the Cluster
    Value: !GetAtt NodeGroup1.Outputs.NodeInstanceRole
