Description: VPC with both public and private subnets.

Parameters:

  AppName:
    Description: Application the infrastructure belongs to
    Type: String
  
  EnvName:
    Description: Environment being deployed to
    Type: String

  VpcCidr:
    Description: IP CIDR for the VPC
    Type: String

  PublicSubnet1Cidr:
    Description: IP CIDR for the first Public Subnet
    Type: String

  PublicSubnet2Cidr:
    Description: IP CIDR for the second Public Subnet
    Type: String

  PrivateSubnet1Cidr:
    Description: IP CIDR for the first Private Subnet
    Type: String

  PrivateSubnet2Cidr:
    Description: IP CIDR for the second Private Subnet
    Type: String

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref VpcCidr
      Tags:
        - Key: Application
          Value: !Ref AppName
        - Key: Environment
          Value: !Ref EnvName

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Application
          Value: !Ref AppName
        - Key: Environment
          Value: !Ref EnvName


  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Application
          Value: !Ref AppName
        - Key: Environment
          Value: !Ref EnvName


  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      Tags:
        - Key: Application
          Value: !Ref AppName
        - Key: Environment
          Value: !Ref EnvName


  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      Tags:
        - Key: Application
          Value: !Ref AppName
        - Key: Environment
          Value: !Ref EnvName


  # Setup networking resources for the public subnets. Containers in the public subnets have public IP addresses and the routing table
  # sends network traffic via the internet gateway.
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  # Setup networking resources for the private subnets. Containers in these subnets have only private IP addresses, and must use a NAT
  # gateway to talk to the internet. We launch two NAT gateways, one for each private subnet.
  NatGatewayOneAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc

  NatGatewayTwoAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
      Domain: vpc

  NatGatewayOne:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayOneAttachment.AllocationId
      SubnetId: !Ref PublicSubnetOne

  NatGatewayTwo:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayTwoAttachment.AllocationId
      SubnetId: !Ref PublicSubnetTwo

  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayOne

  PrivateRouteTableOneAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      SubnetId: !Ref PrivateSubnetOne

  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayTwo

  PrivateRouteTableTwoAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      SubnetId: !Ref PrivateSubnetTwo

  # OPTIONAL: VPC Endpoint for DynamoDB
  # If a container needs to access DynamoDB this allows a container in the private subnet to talk to DynamoDB directly without needing 
  # to go via the NAT gateway. This reduces the amount of bandwidth through the gateway
  # DynamoDBEndpoint:
  #   Type: AWS::EC2::VPCEndpoint
  #   Properties:
  #     PolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Action: "*"
  #           Principal: "*"
  #           Resource: "*"
  #     RouteTableIds:
  #       - !Ref PrivateRouteTableOne
  #       - !Ref PrivateRouteTableTwo
  #     ServiceName: !Sub "com.amazonaws.${AWS::Region}.dynamodb"
  #     VpcId: !Ref VPC

Outputs:

  VPC:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref VPC

  PublicSubnetOne:
    Description: Public subnet one
    Value: !Ref PublicSubnetOne

  PublicSubnetTwo:
    Description: Public subnet two
    Value: !Ref PublicSubnetTwo

  PrivateSubnetOne:
    Description: Private subnet one
    Value: !Ref PrivateSubnetOne

  PrivateSubnetTwo:
    Description: Private subnet two
    Value: !Ref PrivateSubnetTwo
