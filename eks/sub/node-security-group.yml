---
Description: EKS Worker Node Security Group rules that also tacks on Ingress/Egress to the Control Plane

Parameters:

  AppName:
    Description: Application the infrastructure belongs to
    Type: String

  ClusterName:
    Description: The cluster name provided when the cluster was created.  If it is incorrect, nodes will not be able to join the cluster.
    Type: String

  ControlPlaneSecurityGroup:
    Description: EKS Control Plane Security Group Id
    Type: AWS::EC2::SecurityGroup::Id

  BastionSecurityGroup:
    Description: Security Group ID for Bastion SSH access
    Type: String # AWS::EC2::SecurityGroup::Id
    Default: ""

  VPC:
    Description: VPC the security groups should be tied to
    Type: AWS::EC2::VPC::Id

Conditions:

  BastionProvided: !Not [ !Equals [ !Ref BastionSecurityGroup, "" ] ]

Resources:

  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: !Sub "Security group for all nodes in the ${AppName} cluster"
      Tags:
        - Key: Application
          Value: !Ref AppName
        - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
          Value: 'owned'

  # Tack on Ingress rules to allow SSH if a Bastion Security Group was provided
  NodeSSH:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: BastionProvided
    Properties:
      Description: Allow node to communicate with each other
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref BastionSecurityGroup
      IpProtocol: '-1'
      FromPort: 22
      ToPort: 22
  
  # Tack on Egress rules to ControlPlaneSecurityGroup for Node Communication
  NodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  ControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443

Outputs:

  NodeSecurityGroup:
    Description: The Node Security Group Id
    Value: !GetAtt NodeSecurityGroup.GroupId
